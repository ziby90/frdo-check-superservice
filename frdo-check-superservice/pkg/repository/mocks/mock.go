// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	rabbitMQ "10.10.11.220/ursgis/rabbitMQ.git"
	model "frdo-check-superservice/model"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockSearchInDb is a mock of SearchInDb interface
type MockSearchInDb struct {
	ctrl     *gomock.Controller
	recorder *MockSearchInDbMockRecorder
}

// MockSearchInDbMockRecorder is the mock recorder for MockSearchInDb
type MockSearchInDbMockRecorder struct {
	mock *MockSearchInDb
}

// NewMockSearchInDb creates a new mock instance
func NewMockSearchInDb(ctrl *gomock.Controller) *MockSearchInDb {
	mock := &MockSearchInDb{ctrl: ctrl}
	mock.recorder = &MockSearchInDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchInDb) EXPECT() *MockSearchInDbMockRecorder {
	return m.recorder
}

// SearchPerson mocks base method
func (m *MockSearchInDb) SearchPerson(person model.Person, nameModule string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPerson", person, nameModule)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPerson indicates an expected call of SearchPerson
func (mr *MockSearchInDbMockRecorder) SearchPerson(person, nameModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPerson", reflect.TypeOf((*MockSearchInDb)(nil).SearchPerson), person, nameModule)
}

// SearchDocument mocks base method
func (m *MockSearchInDb) SearchDocument(recipientId uint, document model.EduDocument) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDocument", recipientId, document)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDocument indicates an expected call of SearchDocument
func (mr *MockSearchInDbMockRecorder) SearchDocument(recipientId, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDocument", reflect.TypeOf((*MockSearchInDb)(nil).SearchDocument), recipientId, document)
}

// SearchAllDocument mocks base method
func (m *MockSearchInDb) SearchAllDocument(recipientId uint, nameModule string) ([]model.EduDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllDocument", recipientId, nameModule)
	ret0, _ := ret[0].([]model.EduDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllDocument indicates an expected call of SearchAllDocument
func (mr *MockSearchInDbMockRecorder) SearchAllDocument(recipientId, nameModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllDocument", reflect.TypeOf((*MockSearchInDb)(nil).SearchAllDocument), recipientId, nameModule)
}

// AddNewQueue mocks base method
func (m *MockSearchInDb) AddNewQueue(smevMsg model.SMEVMessage, typeQueue string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewQueue", smevMsg, typeQueue)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewQueue indicates an expected call of AddNewQueue
func (mr *MockSearchInDbMockRecorder) AddNewQueue(smevMsg, typeQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewQueue", reflect.TypeOf((*MockSearchInDb)(nil).AddNewQueue), smevMsg, typeQueue)
}

// GetDbConnections mocks base method
func (m *MockSearchInDb) GetDbConnections() map[string]*sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbConnections")
	ret0, _ := ret[0].(map[string]*sqlx.DB)
	return ret0
}

// GetDbConnections indicates an expected call of GetDbConnections
func (mr *MockSearchInDbMockRecorder) GetDbConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbConnections", reflect.TypeOf((*MockSearchInDb)(nil).GetDbConnections))
}

// GetEducationLevel mocks base method
func (m *MockSearchInDb) GetEducationLevel() map[int]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducationLevel")
	ret0, _ := ret[0].(map[int]string)
	return ret0
}

// GetEducationLevel indicates an expected call of GetEducationLevel
func (mr *MockSearchInDbMockRecorder) GetEducationLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducationLevel", reflect.TypeOf((*MockSearchInDb)(nil).GetEducationLevel))
}

// UpdateQueueLog mocks base method
func (m *MockSearchInDb) UpdateQueueLog(smevMsg model.SMEVMessage, typeQueue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueLog", smevMsg, typeQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQueueLog indicates an expected call of UpdateQueueLog
func (mr *MockSearchInDbMockRecorder) UpdateQueueLog(smevMsg, typeQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueLog", reflect.TypeOf((*MockSearchInDb)(nil).UpdateQueueLog), smevMsg, typeQueue)
}

// MockQueueWorker is a mock of QueueWorker interface
type MockQueueWorker struct {
	ctrl     *gomock.Controller
	recorder *MockQueueWorkerMockRecorder
}

// MockQueueWorkerMockRecorder is the mock recorder for MockQueueWorker
type MockQueueWorkerMockRecorder struct {
	mock *MockQueueWorker
}

// NewMockQueueWorker creates a new mock instance
func NewMockQueueWorker(ctrl *gomock.Controller) *MockQueueWorker {
	mock := &MockQueueWorker{ctrl: ctrl}
	mock.recorder = &MockQueueWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueWorker) EXPECT() *MockQueueWorkerMockRecorder {
	return m.recorder
}

// GetNewMessage mocks base method
func (m *MockQueueWorker) GetNewMessage() (rabbitMQ.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewMessage")
	ret0, _ := ret[0].(rabbitMQ.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewMessage indicates an expected call of GetNewMessage
func (mr *MockQueueWorkerMockRecorder) GetNewMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMessage", reflect.TypeOf((*MockQueueWorker)(nil).GetNewMessage))
}

// ParseMessage mocks base method
func (m *MockQueueWorker) ParseMessage(body []byte) (model.SMEVMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMessage", body)
	ret0, _ := ret[0].(model.SMEVMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMessage indicates an expected call of ParseMessage
func (mr *MockQueueWorkerMockRecorder) ParseMessage(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMessage", reflect.TypeOf((*MockQueueWorker)(nil).ParseMessage), body)
}

// SetMessage mocks base method
func (m *MockQueueWorker) SetMessage(request model.SMEVMessage, xmlBody string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessage", request, xmlBody)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMessage indicates an expected call of SetMessage
func (mr *MockQueueWorkerMockRecorder) SetMessage(request, xmlBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessage", reflect.TypeOf((*MockQueueWorker)(nil).SetMessage), request, xmlBody)
}

// PublishMessage mocks base method
func (m *MockQueueWorker) PublishMessage(msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage
func (mr *MockQueueWorkerMockRecorder) PublishMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockQueueWorker)(nil).PublishMessage), msg)
}

// SetStatusMessage mocks base method
func (m *MockQueueWorker) SetStatusMessage(requeue bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusMessage", requeue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusMessage indicates an expected call of SetStatusMessage
func (mr *MockQueueWorkerMockRecorder) SetStatusMessage(requeue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusMessage", reflect.TypeOf((*MockQueueWorker)(nil).SetStatusMessage), requeue)
}

// MockParsingXML is a mock of ParsingXML interface
type MockParsingXML struct {
	ctrl     *gomock.Controller
	recorder *MockParsingXMLMockRecorder
}

// MockParsingXMLMockRecorder is the mock recorder for MockParsingXML
type MockParsingXMLMockRecorder struct {
	mock *MockParsingXML
}

// NewMockParsingXML creates a new mock instance
func NewMockParsingXML(ctrl *gomock.Controller) *MockParsingXML {
	mock := &MockParsingXML{ctrl: ctrl}
	mock.recorder = &MockParsingXMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParsingXML) EXPECT() *MockParsingXMLMockRecorder {
	return m.recorder
}

// ParseXmlToStruct mocks base method
func (m *MockParsingXML) ParseXmlToStruct(body string) (model.FRDORequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseXmlToStruct", body)
	ret0, _ := ret[0].(model.FRDORequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseXmlToStruct indicates an expected call of ParseXmlToStruct
func (mr *MockParsingXMLMockRecorder) ParseXmlToStruct(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseXmlToStruct", reflect.TypeOf((*MockParsingXML)(nil).ParseXmlToStruct), body)
}

// SetResponseSearchToXml mocks base method
func (m *MockParsingXML) SetResponseSearchToXml(response model.CheckDocumentResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResponseSearchToXml", response)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResponseSearchToXml indicates an expected call of SetResponseSearchToXml
func (mr *MockParsingXMLMockRecorder) SetResponseSearchToXml(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseSearchToXml", reflect.TypeOf((*MockParsingXML)(nil).SetResponseSearchToXml), response)
}

// SetResponseAllDocsToXml mocks base method
func (m *MockParsingXML) SetResponseAllDocsToXml(response model.GetDocumentsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResponseAllDocsToXml", response)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResponseAllDocsToXml indicates an expected call of SetResponseAllDocsToXml
func (mr *MockParsingXMLMockRecorder) SetResponseAllDocsToXml(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseAllDocsToXml", reflect.TypeOf((*MockParsingXML)(nil).SetResponseAllDocsToXml), response)
}
